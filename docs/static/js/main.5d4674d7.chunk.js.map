{"version":3,"sources":["pages/Search.js","pages/About.js","components/WaitProgress.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["Search","timer","loremIpsum","useState","__html","text","setText","className","type","placeholder","id","onChange","event","clearTimeout","search","target","value","setTimeout","newText","initIndex","indexOfFirst","indexOf","substring","length","dangerouslySetInnerHTML","About","href","WaitProgress","forward","progress","setProgress","useEffect","interval","setInterval","p","clearInterval","UserPage","user","loading","setUser","a","axios","data","getUser","src","avatar_url","alt","login","name","blog","followers","withRouter","props","routes","path","display","component","Users","menuRef","createRef","menuVoices","map","route","key","exact","to","routeComponents","unlisten","history","listen","location","action","current","checked","ref","htmlFor","Boolean","window","hostname","match","ReactDOM","render","hashType","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d4674d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Search() {\r\n    const loremIpsum = `Ipsum fugiat deserunt reprehenderit eiusmod pariatur culpa adipisicing tempor. Elit id aute cillum aliquip irure esse minim in sint reprehenderit laboris. Laboris ad cillum sit aliquip veniam ipsum culpa mollit et magna ut.\r\n\r\nCupidatat quis veniam sint adipisicing laborum commodo laborum aliqua enim amet. Consectetur consequat laborum ea commodo. Laboris fugiat non excepteur magna dolore.\r\n\r\nExcepteur Lorem exercitation deserunt eu proident ipsum sit in amet. Ut sunt sunt eu do nostrud adipisicing. Nisi sint do id commodo sint deserunt Lorem dolor ipsum enim nulla qui aliqua.\r\n\r\nPariatur dolor commodo sit cupidatat. Labore officia consectetur dolor sint voluptate deserunt qui aliqua ea. Cillum id sit reprehenderit eiusmod eiusmod Lorem id ullamco. Occaecat reprehenderit in consequat est. Irure Lorem nostrud nulla eu eu incididunt adipisicing incididunt incididunt proident est ea. Esse aute enim sit magna dolore deserunt. In id tempor exercitation sint laboris minim voluptate ea.\r\n\r\nEa voluptate sint proident irure consectetur ullamco elit proident duis occaecat ipsum. Dolore duis adipisicing dolore cillum ad ad officia ea cupidatat id laboris et. Reprehenderit cillum nisi aliquip laborum est cupidatat do et ex irure Lorem ipsum ullamco deserunt.\r\n\r\nSit veniam in occaecat do reprehenderit fugiat qui. Culpa occaecat culpa culpa tempor aute ex culpa tempor in cillum exercitation ex sint. In sint veniam officia pariatur cillum nulla ullamco.\r\n\r\nCillum enim commodo tempor est cillum nulla. Laborum magna ea exercitation pariatur irure sit ut ipsum deserunt qui culpa amet irure. Culpa commodo exercitation voluptate cupidatat non id occaecat eu incididunt occaecat culpa.\r\n\r\nMollit non elit pariatur non aliquip ipsum ut ut nisi qui mollit sunt enim. Sint voluptate irure in deserunt adipisicing fugiat. Tempor commodo ex aliquip consequat ex velit ad. Consectetur exercitation esse mollit esse consequat ex anim commodo ipsum non ipsum.\r\n\r\nAmet commodo qui nulla voluptate adipisicing ad commodo cupidatat nulla quis dolore Lorem. Commodo nisi laborum culpa pariatur labore sit minim cillum est dolor quis eu officia. Cillum reprehenderit dolor in ad cupidatat enim exercitation consectetur laboris nulla ipsum id. Excepteur elit nostrud fugiat non. Cillum laborum enim culpa aliqua pariatur ipsum. Occaecat anim est commodo velit. Proident et voluptate eu eu ex reprehenderit qui velit.\r\n\r\nEu ex occaecat anim esse. Laboris esse enim veniam ullamco ut elit fugiat est irure irure officia. Ullamco cillum duis commodo ullamco aliqua deserunt do duis Lorem mollit do ut. Occaecat ullamco qui officia mollit. In mollit et dolor quis nisi. Dolor minim elit enim culpa consequat eiusmod eu enim labore labore consectetur sit enim.`\r\n\r\n    // Getter and setter for selection state\r\n    const [text, setText] = useState({ __html: loremIpsum })\r\n\r\n    let timer;\r\n\r\n    const handleSearch = (event) => {\r\n        // Clears running timer and starts a new one each time the user types\r\n        clearTimeout(timer);\r\n\r\n        let search = event.target.value\r\n\r\n        timer = setTimeout(() => {\r\n            let newText = \"\"\r\n            let initIndex = 0\r\n\r\n            if(search !== \"\") {\r\n                let indexOfFirst = loremIpsum.indexOf(search)\r\n                while(indexOfFirst !== -1) {\r\n    \r\n                    newText += loremIpsum.substring(initIndex, indexOfFirst)\r\n                    newText += \"<strong>\" + loremIpsum.substring(indexOfFirst, indexOfFirst + search.length) + \"</strong>\"\r\n    \r\n                    initIndex = indexOfFirst + search.length\r\n                    indexOfFirst = loremIpsum.indexOf(search, indexOfFirst + 1)\r\n                }\r\n            }\r\n\r\n            newText += loremIpsum.substring(initIndex, loremIpsum.length)\r\n\r\n            setText({ __html: newText })\r\n        }, 500)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" placeholder=\"Search\" id=\"paperInputs1\" onChange={handleSearch} />\r\n            </div>\r\n            <p dangerouslySetInnerHTML={text}></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h2>React Test</h2>\r\n            <p>\r\n                Prima applicazione per testare React sviluppata da <a href=\"https://studiocamito.it\">Simone Camito</a>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react'\r\n\r\nexport default function WaitProgress() {\r\n    // Getter and setter for user state\r\n    const [progress, setProgress] = useState({ forward: true, value: 0 })\r\n\r\n    useEffect(() => {\r\n        let interval = setInterval(\r\n            () => {\r\n                if(progress.forward) {\r\n                    if(progress.value === 100) {\r\n                        setProgress(p => { return { forward: false, value: 100 }})\r\n                    } else {\r\n                        setProgress(p => { return { forward: true, value: p.value + 1 }})\r\n                    }\r\n                } else {\r\n                    if(progress.value === 0) {\r\n                        setProgress(p => { return { forward: true, value: 0 }})\r\n                    } else {\r\n                        setProgress(p => { return { forward: false, value: p.value - 1 }})\r\n                    }\r\n                }\r\n            },\r\n            150\r\n        )     \r\n\r\n        // return cleaanup\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"progress\">\r\n            <div className={`bar striped secondary w-${progress.value}`}></div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './User.css';\r\nimport WaitProgress from '../components/WaitProgress'\r\n\r\nexport default function UserPage() {\r\n  // Setting initial state\r\n  const initialUserState = {\r\n    user: {},\r\n    loading: true,\r\n  }\r\n\r\n  // Getter and setter for user state\r\n  const [user, setUser] = useState(initialUserState)\r\n\r\n  // Using useEffect to retrieve data from an API (similar to componentDidMount in a class)\r\n  useEffect(() => {\r\n    const getUser = async () => {\r\n      const { data } = await axios(`https://api.github.com/users/malpenzibo`)\r\n\r\n      // Update state\r\n      setUser(data)\r\n    }\r\n\r\n    // Invoke the async function\r\n    getUser()\r\n  }, []) // Don't forget the `[]`, which will prevent useEffect from running in an infinite loop\r\n\r\n  return user.loading ? (\r\n    <WaitProgress />\r\n  ) : (\r\n    <div className=\"user-content\">\r\n      <img src={user.avatar_url} alt=\"avatar\" className=\"float-left\" ></img>\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <h4 className=\"card-title\">{user.login}</h4>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div>\r\n            <span>Name:</span>\r\n            <span>{user.name}</span>\r\n          </div>\r\n          <div>\r\n            <span>WebSite:</span>\r\n            <span><a href={user.blog}>{user.blog}</a></span>\r\n          </div>\r\n          <div>\r\n            <span>Followers:</span>\r\n            <span>{user.followers}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { createRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'papercss/dist/paper.min.css'\r\nimport { NavLink, Route } from 'react-router-dom'\r\nimport { withRouter } from 'react-router'\r\nimport Search from './pages/Search'\r\nimport About from './pages/About'\r\nimport Users from './pages/Users'\r\n\r\nfunction App(props) {\r\n  const routes = [\r\n    { path: \"/\", display: \"Search\", component: Search},\r\n    { path: \"/user\", display: \"User\", component: Users},\r\n    { path: \"/about\", display: \"About\", component: About},\r\n  ]\r\n\r\n  const menuRef = createRef()\r\n\r\n  const menuVoices = routes.map((route) => {\r\n    return (\r\n      <li key={route.path}><NavLink exact to={route.path}>{route.display}</NavLink></li>\r\n    )\r\n  })\r\n\r\n  const routeComponents = routes.map((route) => {\r\n    return (\r\n      <Route key={route.path} exact path={route.path} component={route.component}/>\r\n    )\r\n  })\r\n\r\n  useEffect(() => {\r\n    let unlisten = props.history.listen((location, action) => {\r\n      menuRef.current.checked = false\r\n    });\r\n\r\n    // return cleanup\r\n    return () => {\r\n      unlisten()\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"fixed split-nav\">\r\n        <div className=\"nav-brand\">\r\n          <h3>React Test</h3>\r\n        </div>\r\n        <div className=\"collapsible\">\r\n          <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible\" ref={menuRef} />\r\n          <button>\r\n            <label htmlFor=\"collapsible1\">\r\n              <div className=\"bar1\"></div>\r\n              <div className=\"bar2\"></div>\r\n              <div className=\"bar3\"></div>\r\n            </label>\r\n          </button>\r\n          <div className=\"collapsible-body\">\r\n            <ul className=\"inline\">\r\n              {menuVoices}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>  \r\n\r\n      <div className=\"content\">\r\n        {routeComponents}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter hashType=\"noslash\">\r\n        <App />\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}