{"version":3,"sources":["pages/Search.js","pages/About.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["Search","About","href","UserPage","props","useState","user","loading","setUser","useEffect","a","axios","data","getUser","spinning","className","login","name","location","blog","followers","App","routes","path","display","component","Users","menuVoices","map","route","key","exact","to","routeComponents","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA6BeA,MA3Bf,WACI,OACI,6BACI,6CACA,o2GCOGC,MAXf,WACI,OACI,6BACI,yCACA,oEAC0C,gCAAYC,KAAK,2BAAjB,oB,iDCJvC,SAASC,EAASC,GAE/B,IAFsC,EAQdC,mBANC,CACvBC,KAAM,GACNC,SAAS,IAJ2B,mBAQ/BD,EAR+B,KAQzBE,EARyB,KAwBtC,OAbAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,sEACSC,IAAM,2CADf,gBACNC,EADM,EACNA,KAGRJ,EAAQI,GAJM,2CAAH,qDAQbC,KACC,IAGIP,EAAKC,QACV,mCAAeO,UAAQ,IAEvB,yBAAKC,UAAU,kBACb,4BAAKT,EAAKU,OAEV,+BACE,+BACE,4BACE,oCACA,wCACA,uCACA,2CAGJ,+BACE,4BACE,4BAAKV,EAAKW,MACV,4BAAKX,EAAKY,UACV,4BACE,uBAAGhB,KAAMI,EAAKa,MAAOb,EAAKa,OAE5B,4BAAKb,EAAKc,eCFPC,MAvCf,WACE,IAAMC,EAAS,CACb,CAAEC,KAAM,IAAKC,QAAS,SAAUC,UAAWzB,GAC3C,CAAEuB,KAAM,QAASC,QAAS,OAAQC,UAAWC,GAC7C,CAAEH,KAAM,SAAUC,QAAS,QAASC,UAAWxB,IAG3C0B,EAAaL,EAAOM,KAAI,SAACC,GAC7B,OACE,wBAAIC,IAAKD,EAAMN,MAAM,kBAAC,IAAD,CAASQ,OAAK,EAACC,GAAIH,EAAMN,MAAM,gCAAYrB,KAAK,KAAK2B,EAAML,cAI9ES,EAAkBX,EAAOM,KAAI,SAACC,GAClC,OACE,kBAAC,IAAD,CAAOC,IAAKD,EAAMN,KAAMQ,OAAK,EAACR,KAAMM,EAAMN,KAAME,UAAWI,EAAMJ,eAIrE,OACE,6BACE,yBAAKV,UAAU,UACb,0CACA,yCAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,4BACGY,IAGL,yBAAKZ,UAAU,WACZkB,MC5BSC,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ec879c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Search() {\r\n    return (\r\n        <div>\r\n            <wired-search-input></wired-search-input>\r\n            <p>Ex nulla consequat est eu aute minim est. Aute excepteur id labore sunt. Irure est cupidatat excepteur id excepteur.\r\n\r\nFugiat anim reprehenderit adipisicing adipisicing. Duis nisi duis exercitation do exercitation deserunt amet. Aliquip commodo velit deserunt minim. Consectetur aute velit fugiat eu esse esse ut cupidatat anim proident. Do aliquip elit irure cupidatat labore sunt cupidatat quis duis est enim. Officia consequat elit ad duis ut irure ea nulla mollit.\r\n\r\nEsse qui duis cillum exercitation dolore eu cupidatat sunt aliquip reprehenderit incididunt aliquip. Mollit excepteur non laboris nulla consequat labore irure id irure ullamco aute nulla excepteur. Cupidatat Lorem tempor aliquip sit id fugiat pariatur ea nisi. Velit non ut non velit cupidatat exercitation magna fugiat laboris irure. Est duis est ex sit consectetur. Quis duis excepteur enim exercitation aliquip consequat mollit ullamco.\r\n\r\nReprehenderit occaecat proident ut ut nostrud est mollit. Lorem et nostrud deserunt excepteur dolor elit. Do elit magna officia est esse nulla ullamco elit fugiat. Consequat aute excepteur dolore magna sint est consectetur pariatur reprehenderit do occaecat velit exercitation excepteur. Magna Lorem laboris in proident.\r\n\r\nEt nulla fugiat et nostrud laborum reprehenderit minim officia ex pariatur do deserunt. Est culpa sint excepteur aliqua irure. Sint nisi labore laborum id incididunt eiusmod do. Ut culpa excepteur commodo culpa.\r\n\r\nPariatur do ullamco voluptate occaecat pariatur laborum sint reprehenderit veniam non ex nisi incididunt quis. Laboris tempor ipsum aliquip amet eiusmod adipisicing. Exercitation commodo sint eu non ullamco ex enim magna enim reprehenderit in ex.\r\n\r\nDolor qui excepteur in ex officia minim nostrud est. Sint id fugiat ipsum ad consequat laborum minim consequat proident veniam exercitation nisi laboris laboris. Mollit consequat et do in in id veniam aliquip ut magna anim qui. Non amet exercitation nulla aliquip aliquip sunt duis commodo in et incididunt ad tempor nisi. Voluptate consequat Lorem mollit ex adipisicing ex laboris sunt incididunt occaecat irure amet esse occaecat. Nisi aliquip ullamco esse elit. Laboris dolore do ad nulla exercitation ex.\r\n\r\nDuis occaecat et elit consectetur culpa. Quis exercitation veniam aliquip ad dolore amet eiusmod. Ad Lorem nisi minim occaecat. Cillum aliqua dolor officia ex eu adipisicing minim culpa. Velit deserunt deserunt id ad excepteur commodo sit sint excepteur.\r\n\r\nOfficia laborum ipsum sint tempor enim amet ex nostrud eiusmod culpa. Ad ut enim incididunt veniam. Voluptate do dolore ad mollit do cupidatat in excepteur ad fugiat elit. Nulla dolore minim incididunt laborum ullamco sunt cupidatat amet quis est duis eiusmod. Enim veniam culpa dolor sunt exercitation. Lorem dolore ipsum ipsum enim cupidatat dolore dolore ad dolore aliqua eiusmod cillum magna.\r\n\r\nSint consectetur non aliquip velit ullamco mollit ad est consequat voluptate eu non aliquip. Reprehenderit commodo veniam enim mollit nisi dolore veniam sit aliqua in aute exercitation ad. Nulla deserunt nulla aute nulla eu id dolore. Qui aliqua ea magna ipsum amet ad et tempor laborum nisi. Adipisicing nulla est minim dolor aliqua ullamco adipisicing nostrud veniam labore enim veniam ullamco consequat. Laboris pariatur quis exercitation deserunt duis. Nostrud non do culpa consequat pariatur aliquip consectetur ut eu do aliqua ea ea eiusmod.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h2>ToDo List</h2>\r\n            <p>\r\n                Prima applicazione di prova creata da <wired-link href=\"https://studiocamito.it\">Simone Camito</wired-link>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function UserPage(props) {\r\n  // Setting initial state\r\n  const initialUserState = {\r\n    user: {},\r\n    loading: true,\r\n  }\r\n\r\n  // Getter and setter for user state\r\n  const [user, setUser] = useState(initialUserState)\r\n\r\n  // Using useEffect to retrieve data from an API (similar to componentDidMount in a class)\r\n  useEffect(() => {\r\n    const getUser = async () => {\r\n      const { data } = await axios(`https://api.github.com/users/malpenzibo`)\r\n\r\n      // Update state\r\n      setUser(data)\r\n    }\r\n\r\n    // Invoke the async function\r\n    getUser()\r\n  }, []) // Don't forget the `[]`, which will prevent useEffect from running in an infinite loop\r\n\r\n  // Return a table with some data from the API.\r\n  return user.loading ? (\r\n    <wired-spinner spinning ></wired-spinner>\r\n  ) : (\r\n    <div className=\"user-container\">\r\n      <h1>{user.login}</h1>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Location</th>\r\n            <th>Website</th>\r\n            <th>Followers</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{user.name}</td>\r\n            <td>{user.location}</td>\r\n            <td>\r\n              <a href={user.blog}>{user.blog}</a>\r\n            </td>\r\n            <td>{user.followers}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport 'wired-elements'\nimport {NavLink, Route} from 'react-router-dom'\nimport Search from './pages/Search'\nimport About from './pages/About'\nimport Users from './pages/Users'\n\nfunction App() {\n  const routes = [\n    { path: \"/\", display: \"Search\", component: Search},\n    { path: \"/user\", display: \"User\", component: Users},\n    { path: \"/about\", display: \"About\", component: About},\n  ]\n\n  const menuVoices = routes.map((route) => {\n    return (\n      <li key={route.path}><NavLink exact to={route.path}><wired-link href=\"/\">{route.display}</wired-link></NavLink></li>\n    )\n  })\n\n  const routeComponents = routes.map((route) => {\n    return (\n      <Route key={route.path} exact path={route.path} component={route.component}/>\n    )\n  })\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>React Test</h1>\n        <wired-divider></wired-divider>\n      </div>\n      <div className=\"container\">\n        <div className=\"menu\">\n          <ul>\n            {menuVoices}\n          </ul>\n        </div>\n        <div className=\"content\">\n          {routeComponents}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}